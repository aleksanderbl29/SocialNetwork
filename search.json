[
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licens",
    "section": "",
    "text": "Opgavebesvarelser på denne side er underlagt © Copyright 2025, Aleksander Bang-Larsen\nOpgaverne er stillet af Jens Peter Andersen & Emil Dolmer Alnor under Creative Commons CC-BY.\n\nDet betyder, det må deles, tilpasses og genbruges af alle med den rette ophavsangivelse."
  },
  {
    "objectID": "license.html#opgaver-og-besvarelse",
    "href": "license.html#opgaver-og-besvarelse",
    "title": "Licens",
    "section": "",
    "text": "Opgavebesvarelser på denne side er underlagt © Copyright 2025, Aleksander Bang-Larsen\nOpgaverne er stillet af Jens Peter Andersen & Emil Dolmer Alnor under Creative Commons CC-BY.\n\nDet betyder, det må deles, tilpasses og genbruges af alle med den rette ophavsangivelse."
  },
  {
    "objectID": "license.html#data",
    "href": "license.html#data",
    "title": "Licens",
    "section": "Data",
    "text": "Data\n\nDatamaterialet er under Creative Commons CC-BY medmindre andet er angivet.\n\nDet betyder, det må deles, tilpasses og genbruges af alle med den rette ophavsangivelse."
  },
  {
    "objectID": "license.html#kode",
    "href": "license.html#kode",
    "title": "Licens",
    "section": "Kode",
    "text": "Kode\n\nKoden på denne side er udstillet med MIT-licens.\n\nDet betyder, at du frit kan genbruge, modificere og distribuere koden."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Opgaver",
    "section": "",
    "text": "Lektion 3\n\n\n\n\n\n\n\n\n\n\n\n24. feb. 2025\n\n\nAleksander Bang-Larsen\n\n\n\n\n\n\n\n\n\n\n\n\nLektion 2 - Dataindsamling\n\n\n\n\n\n\n\n\n\n\n\n17. feb. 2025\n\n\nAleksander Bang-Larsen\n\n\n\n\n\n\n\n\n\n\n\n\nLektion 1 - Generel teori om sociale netværk\n\n\n\n\n\n\n\n\n\n\n\n3. feb. 2025\n\n\nAleksander Bang-Larsen\n\n\n\n\n\n\nIngen resultater\n\n Tilbage til toppen"
  },
  {
    "objectID": "Lektion 3/Lektion 3.html",
    "href": "Lektion 3/Lektion 3.html",
    "title": "Lektion 3",
    "section": "",
    "text": "I har lavet i forvejen løst opgaven: - ”Find papir og pen frem og tegn netværket, som I forestiller jer det så ud 1 måned efter sammenlægningen. Visualiser nodernes forskellige organisatoriske roller (lærer/pædagog, medarbejder/leder, osv.). For at gøre tegneopgaven overskuelig, kan I tage udgangspunkt i, at organisationerne havde få ansatte.”\nNu skal I løse opgaverne:"
  },
  {
    "objectID": "Lektion 3/Lektion 3.html#lav-edge--og-nodelist-i-excelark",
    "href": "Lektion 3/Lektion 3.html#lav-edge--og-nodelist-i-excelark",
    "title": "Lektion 3",
    "section": "Lav edge- og nodelist i excelark",
    "text": "Lav edge- og nodelist i excelark\nFørst indlæser vi alle de nødvendige pakker\n\nlibrary(tidyverse)\nlibrary(tidygraph)\nlibrary(ggraph)\n\nJeg importerer de to filer med {readxl}.\n\ne &lt;- readxl::read_excel(\"Lektion 3/edgelist.xlsx\")\nn &lt;- readxl::read_excel(\"Lektion 3/nodelist.xlsx\")\n\nSå kan vi inspicere de to datasæt\n\nhead(e, 2)\n\n# A tibble: 2 × 2\n   from    to\n  &lt;dbl&gt; &lt;dbl&gt;\n1     1    21\n2     2     1\n\nhead(n, 2)\n\n# A tibble: 2 × 5\n     id   job job_name         origin origin_name                          \n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;                                \n1     1     3 Leder                 1 Skræddermarkens Skole                \n2     2     4 Adm. Medarbejder      3 Søndermarkens Integrerede Institution"
  },
  {
    "objectID": "Lektion 3/Lektion 3.html#dan-graf-med-noder-og-kanter",
    "href": "Lektion 3/Lektion 3.html#dan-graf-med-noder-og-kanter",
    "title": "Lektion 3",
    "section": "Dan graf med noder og kanter",
    "text": "Dan graf med noder og kanter\n\nnetwork &lt;- tbl_graph(\n  nodes = n,\n  edges = e,\n  directed = FALSE\n)\n\nJeg tegner hurtigt netværket for at se, hvordan det ser ud.\n\nnetwork |&gt;\n  ggraph(layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(aes(color = job_name, shape = job_name), size = 4) +\n  scale_color_viridis(\n    discrete = TRUE,\n    option = \"turbo\"\n  ) +\n  theme_graph()"
  },
  {
    "objectID": "Lektion 3/Lektion 3.html#beregn-3-centralitetsmål-for-noderne",
    "href": "Lektion 3/Lektion 3.html#beregn-3-centralitetsmål-for-noderne",
    "title": "Lektion 3",
    "section": "Beregn 3 centralitetsmål for noderne",
    "text": "Beregn 3 centralitetsmål for noderne\nJeg udvælger:\n\nDegree centralitet\nBetweenness centralitet\nCloseness centralitet\n\n\nDegree centralitet\n\nnetwork &lt;- network |&gt; \n  mutate(degree = centrality_degree())\n\n\n\nBetweenness centralitet\n\nnetwork &lt;- network |&gt; \n  mutate(between = centrality_betweenness())\n\n\n\nCloseness centralitet\n\nnetwork &lt;- network |&gt; \n  mutate(closeness = centrality_closeness())\n\n\nnetwork |&gt;\n  ggraph(layout = \"stress\") +\n  geom_edge_link() +\n  geom_node_point(\n    aes(\n      color = job_name,\n      shape = job_name,\n      size = degree\n    ),\n    size = 4) +\n  scale_color_viridis(discrete = TRUE, option = \"turbo\") +\n  theme_graph()"
  },
  {
    "objectID": "Lektion 2/Lektion 2.html",
    "href": "Lektion 2/Lektion 2.html",
    "title": "Lektion 2 - Dataindsamling",
    "section": "",
    "text": "Lav et fiktivt netværk med 7-10 noder. I vælger selv om det skal være directed eller undirected, og hvilke egenskaber noderne skal have. Formålet er at øve hvordan netværk hænger sammen, og hvordan de kan genereres fra bunden.\nVisualisér netværket og afprøve forskellige layout-algoritmer."
  },
  {
    "objectID": "Lektion 2/Lektion 2.html#indlæs-pakker",
    "href": "Lektion 2/Lektion 2.html#indlæs-pakker",
    "title": "Lektion 2 - Dataindsamling",
    "section": "Indlæs pakker",
    "text": "Indlæs pakker\nFørst skal vi indlæse de nødvendige pakker. Jeg sætter også et seed for at sikre det tilfædige udtræk, jeg vil bruge senere, er reproducerbart.\n\nlibrary(tidyverse)\nlibrary(tidygraph)\nlibrary(ggraph)\nset.seed(17022025) # Dags dato"
  },
  {
    "objectID": "Lektion 2/Lektion 2.html#generer-netværk-med-7-10-noder",
    "href": "Lektion 2/Lektion 2.html#generer-netværk-med-7-10-noder",
    "title": "Lektion 2 - Dataindsamling",
    "section": "Generer netværk med 7-10 noder",
    "text": "Generer netværk med 7-10 noder\nJeg laver netværket med tilfældigt udtræk fra en liste af noder. Jeg har valgt at det skal være directed. Først skal vi vælge, hvem der skal være med i netværket. I mit fiktive scenarie vælger jeg politikere og lobbyister. De får alle et bogstav til at identificere sig med.\n\nnetwork_names &lt;- tibble(name = paste(c(\"Politiker\", \"Lobbyist\"), LETTERS[1:10]))\nprint(network_names$name)\n\n [1] \"Politiker A\" \"Lobbyist B\"  \"Politiker C\" \"Lobbyist D\"  \"Politiker E\"\n [6] \"Lobbyist F\"  \"Politiker G\" \"Lobbyist H\"  \"Politiker I\" \"Lobbyist J\" \n\n\nNu har vi navne-vectoren (egentlig navne-kolonnen). Det næste jeg skal producere er en tibble med minimum from og to kolonner. Her starter jeg med at gentage noderne \\(1-7\\). De bliver forbundet med noder der tilfældigt udtrækkes fra en vector \\(4-10\\). På den måde får jeg noder der er mere og mindre forbundet. Udover to og from kolonnerne laver jeg også en tilfældigt udtræk af en vægt for hver kant. De vægter inddeler jeg også i hver sin kvartil.\n\nnetwork_edges &lt;- tibble(\n  from = rep(1:7, 3),\n  to = sample(4:10, length(from), replace = TRUE),\n  rand_weight = runif(length(from)),\n  quantile = cut(\n    rand_weight,\n    breaks = quantile(rand_weight, probs = seq(0, 1, 0.25)),\n    labels = c(\"Q1\", \"Q2\", \"Q3\", \"Q4\"),\n    include.lowest = TRUE\n  )\n)\n\nHer er netværkets kanter så genereret som tibble. Det kan vi inputte, sammen med nodernes navne. Derudover specificerer jeg også at netværket skal være directed.\n\nnetwork &lt;- tbl_graph(\n  nodes = network_names,\n  edges = network_edges,\n  directed = TRUE\n)"
  },
  {
    "objectID": "Lektion 2/Lektion 2.html#herefter-printer-vi-netværket",
    "href": "Lektion 2/Lektion 2.html#herefter-printer-vi-netværket",
    "title": "Lektion 2 - Dataindsamling",
    "section": "Herefter printer vi netværket",
    "text": "Herefter printer vi netværket\nJeg bruger stress-layout og plotter grafen med de tilfældige vægte. Jeg farver kanterne efter den kvartil af vægt de lander i og giver dem en lukket pil. Jeg tilføjer også labels med personernes navne.\n\nnetwork |&gt;\n  ggraph(layout = \"stress\", weights = rand_weight) +\n  geom_edge_link(\n    arrow = arrow(length = unit(4, \"mm\"), type = \"closed\"),\n    aes(color = quantile)\n  ) +\n  geom_node_point() +\n  geom_node_label(\n    aes(label = name),\n    repel = TRUE\n  ) +\n  scale_edge_color_viridis(\n    name = \"Vægt kvartil\",\n    discrete = TRUE,\n    option = \"turbo\"\n  ) +\n  coord_cartesian(clip = \"off\") + # For at labels ikke \"clippes\" når de går længere ud end grafen.\n  theme_graph()"
  },
  {
    "objectID": "Lektion 1/Lektion 1.html",
    "href": "Lektion 1/Lektion 1.html",
    "title": "Lektion 1 - Generel teori om sociale netværk",
    "section": "",
    "text": "Skriv korte reflektioner over hvordan du vil indlæse og visualisere det grundlæggende netværk i Zacharys Karate Club.\nHent Zachary data fra filen og plot grafen med to forskellige algoritmer."
  },
  {
    "objectID": "Lektion 1/Lektion 1.html#indlæs-pakker",
    "href": "Lektion 1/Lektion 1.html#indlæs-pakker",
    "title": "Lektion 1 - Generel teori om sociale netværk",
    "section": "Indlæs pakker",
    "text": "Indlæs pakker\nFørst vil jeg indlæse de nødvendige pakker.\n\nlibrary(tidyverse)\nlibrary(tidygraph)\nlibrary(ggraph)"
  },
  {
    "objectID": "Lektion 1/Lektion 1.html#hent-og-indlæs-data",
    "href": "Lektion 1/Lektion 1.html#hent-og-indlæs-data",
    "title": "Lektion 1 - Generel teori om sociale netværk",
    "section": "Hent og indlæs data",
    "text": "Hent og indlæs data\nHerefter henter jeg data fra linket med read_tsv(). Det data piper jeg ind i tbl_graph() som edges.\nJeg giver read_tsv() filens URL for at gøre koden mere portable. Det kunne også være smart at hente den lokalt, hvis jeg skulle være nervøs for at filen ville ændre sig. Jeg gemmertbl_graph-objektet i variablen zachary.\n\nurl &lt;- \"https://cfa-research.au.dk/courses/networks_F25/data/lektion1_zach_edges.txt\"\nzachary &lt;- read_tsv(url) |&gt;\n  tbl_graph(edges = _)\n\nOvenstående trin kunne godt være delt op i flere code-blocks, men det er ikke særligt effektivt. For at være sikker på min komprimerede udgave giver mig det rigtige output vil jeg dog inspicere dataet med glimpse().\n\nglimpse(zachary)\n\n── Nodes ───────────────────────────────────────────────────────────────────────\n\n\nRows: 34\nColumns: 0\n\n\n── Edges ───────────────────────────────────────────────────────────────────────\n\n\nRows: 78\nColumns: 2\n$ from &lt;int&gt; 1, 1, 2, 1, 2, 3, 1, 1, 1, 5, 6, 1, 2, 3, 4, 1, 3, 3, 1, 5, 6, 1,…\n$ to   &lt;int&gt; 2, 3, 3, 4, 4, 4, 5, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 10, 11, 11, 11…\n\n\nDet ser umiddelbart fint ud - Jeg går videre."
  },
  {
    "objectID": "Lektion 1/Lektion 1.html#plot-grafen-med-fr-og-kk",
    "href": "Lektion 1/Lektion 1.html#plot-grafen-med-fr-og-kk",
    "title": "Lektion 1 - Generel teori om sociale netværk",
    "section": "Plot grafen med FR og KK",
    "text": "Plot grafen med FR og KK\nFørst plotter jeg grafen med fr. Det giver et lidt rodet netværk. Jeg har svært ved at helt tyde, hvordan noderne hænger sammen - Især dem der ikke bedst forbundne.\n\nzachary |&gt;\n  ggraph(layout = \"fr\") +\n  geom_edge_link() +\n  geom_node_point() +\n  theme_graph()\n\n\n\n\n\n\n\n\nDernæst plotter jeg grafen med kk. Det har jeg hørt Jens Peter godt kan lide - Og det kan jeg godt forstå! Her får jeg godt overblik over alle noderne og jeg kan let kende forskel på de noder der er godt og dårligt forbundet.\n\nzachary |&gt;\n  ggraph(layout = \"kk\") +\n  geom_edge_link() +\n  geom_node_point() +\n  theme_graph()\n\n\n\n\n\n\n\n\nTil sidst vil jeg forsøge med et stress-layout. Thomas Lin skriver i sin dokumentation at dette layout baseret på stress minimisation har bedre stabilitet end KK-layouet ovenfor. Som jeg ser det, giver dette layout et mere “fladt” udseende. Kanterne bliver længere, hvilket ikke er så problematisk for dette datasæt, men nok vil være det ved større netværk.\n\nzachary |&gt; \n  create_layout(layout = \"stress\") |&gt; \n  ggraph() +\n  geom_edge_link() +\n  geom_node_point() +\n  theme_graph()"
  }
]